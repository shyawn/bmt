Hi there! This is a guide for the Exercises in Lesson 3, you can refer to this for some
clarification or when you're stuck on an exercise.

*Note: The 'templates' folder is created just to assist the lesson exercises, it's not 
 present in a normal Nuxt project!

##########################################################################################
#                              Exercise 1: Project Structure                             #
##########################################################################################

- For this exercise, we'll be focussing on setting up the project for the next 2 exercises

(1) Pages
    - After running the website locally using "yarn dev", the project runs 
      the main page (index.vue)
    - We won't be using the base file but the one in 'templates' instead
    - Copy-paste the contents of templates/index.vue into pages/index.vue

(2) Components
    - This is the folder where we will store all our components
    - Drag Card.vue into 'components' folder

(3) Icons and Images
    - In an IT project, images and icons are stored in the 'assets' folder. However, 
      currently it is still empty
    - The required assets are found in 'templates'
    - Drag both the 'icons' and 'images' folder into the 'assets' folder

---------------------------------------------------------
-> Task 1: Complete PART 1 using the hints in index.vue |
---------------------------------------------------------

##########################################################################################
#                                Exercise 2: Props & Data                                #
##########################################################################################

- For this exercise, we'll work on using the Card component in our index page

--------------------------------------------------------------------------------
-> Task 2: Follow the hints below to complete PART 2 in index.vue and Card.vue |
--------------------------------------------------------------------------------

Setup for Component
(a) We'll need to import Card.vue into index.vue
    - E.g. import Button from '@/components/Button.vue'

(b) We'll need to call the component in the 'export default' script
    - Add in 'components: { ... }' to declare your component
    - E.g. to use Button component: <Button/>

Fill in Attributes
(a) The data for the component are already coded in for you, refer to 'item' in index.vue
(b) How would you bind 'item' to your component?
    - E.g. <Button :item="item"/>

Receiving data as props in Component
(a) Component will receive 'item' data as an object
    - Add in 'props: { item: Object }'

(b) How would you access and call the prop attributes?
    - E.g. <h2>{{ item.title }}</h2>

##########################################################################################
#                             Exercise 3: Vue Directives                                 #
##########################################################################################

- For this exercise, we'll be using a few Vue Directives to make multiple cards

--------------------------------------------------------------------------------
-> Task 3: Follow the hints below to complete PART 3 in index.vue and Card.vue |
--------------------------------------------------------------------------------

Data setup for multiple cards 
- Refer to items.txt in 'templates'
- You'll need to copy 'items' into index.vue, below 'item'
*Note: Unlike 'item' which is a single object, 'items' is an array of objects instead

(1) Which Vue Directive allows ITERATION in an array?
    - You'll need to use this inside the Card component in index.vue
    - Hint: We went through v-on, v-if, v-for

(OPTIONAL CHALLENGE)
(2) Once multiple cards are created, you'll notice that some cards are supposed to use 
    images instead of title1 but the images are not appearing
    - You'll need to use some conditional statements, which Vue Directive allows for this?
    - Hint: We went through v-on, v-if, v-for

//////////////////////////////////////////////////////////////////////////////////////////